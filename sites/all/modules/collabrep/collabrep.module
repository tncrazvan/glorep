<?php
//$Id$
//the above line is needed only to release the module into the drupal module database
/*
This version of the software has been entirely written by Riccardo Bastianini, under the supervision of
Professor Sergio Tasso of University of Perugia.

	CollabRep enables Drupal to join/create/work with a learning object repository federation.
    Copyright (C) 2010 Riccardo Bastianini

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*/


//implementation of hook_help

function collabrep_help($path, $arg) 
{
	$output = '';  //declare your output variable
	switch ($path) {
		case "admin/help#collabrep":
		$output = '<p>'.t("Makes Drupal interconnection possible.") .'</p>';
		break;
	}
  return $output;
}

//implementation of hook_permission   //hook_perm() has changed in drupal 7 
function collabrep_permission() {
  return array(
  	'collabrep edit settings' => array(
  		'title'=> t('collabrep edit settings'),
  		'description' => t(''),
  		),
  	'is a collabrep repository representation' => array(
  		'title' => t('is a collabrep repository representation'),
  		'description' => t(''),
  		),
  	);
}

function db_local_access()
{
	//send to python the db url
	global $databases;
	$drupal_db=$databases['default']['default'];
	$drupal_db_url=$drupal_db['driver'] 
       	. '://' . $drupal_db['username'] 
       	. ":" .  $drupal_db['password'] 
       	. "@" .  $drupal_db['host'] 
       	. "/" . $drupal_db['database'];		
	
	drupal_set_message($drupal_db_url,'status');
	////////////////////controllare se i file python esistono e se il log e' scrivibile
	
	return $drupal_db_url;
}

function collabrep_python_interface($op, $param=False)
{
	unset($output);
	//file io
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/file.inc');
	//
	$path="python ".dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR . "interface.py";
	$pathxshell=dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR;
	$paramList='-'.$op;
	switch ($op) 
	{
		case "check_shared_database":
			drupal_set_message($op,'status');		
			$paramList.= ' "'.$param.'"';
			exec($path.' '.$paramList, $output, $value);	
			//if everything works returns a True value, else returns False
			return $value;	
		break;
		case "bootstrap_shared_setup":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" '.$param["myUrl"].' "'.$param["myUser"].'" "'.$param["myPass"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True) 
			{
				$toret = array("return" => True);
			}
			else 
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "update_local_fuids":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True) 
			{
				$toret = array("return" => True);
			}
			else 
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "leave_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$param.'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("Leave federation "),'status');
			if ($value == True) 
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;	
		break;
		case "exec_remote_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_remote_cron "),'status');
			if ($value == True) 
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "exec_local_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_local_cron "),'status');
			if ($value == True) 
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;	
		case "import_local_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("import_local_federation "),'status');
			if ($value == True) 
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;	
		break;
		
	}
	return "There is an error calling the Python modules!";
}
//implementation of hook_menu
function collabrep_menu() 
{
	$items = array();
    		$items['admin/settings/collabrep'] = array(
			'title' => 'CollabRep',
			'description' => 'Federation and Repository settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_cron'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['admin/settings/collabrep/Create-join'] = array(
			'title' => 'Create/Join Federation',
			'description' => 'Create or join Federation',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_create_or_join_federation'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_LOCAL_TASK,
		);
		$items['admin/settings/collabrep/Leave'] = array(
			'title' => 'Leave Federation',
			'description' => 'Leave a Federation',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_leave'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_LOCAL_TASK,
		);
		$items['admin/settings/collabrep/Cron'] = array(
			'title' => 'Synchronize',
			'description' => 'Cron federations',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_cron'),
			'access arguments' => array('collabrep edit settings'),
			'type' =>  MENU_DEFAULT_LOCAL_TASK,
		);
	return $items;
}

function collabrep_cron() 
{
	$form = array();
	drupal_set_message(t("Cron"),'warning');
	if(variable_get('collabrep_federation_status', '0')==4)
	{
		//Esporta i propri learning object
	        $param = "";
		$ret= collabrep_python_interface("exec_local_cron", $param);
		if ($ret["return"]==True) 
		{
			drupal_set_message(t("exec local cron ok!"),'status');
			$ret2= collabrep_python_interface("exec_remote_cron", $param);
			if ($ret2["return"]==True) 
			{
				drupal_set_message(t("exec remote cron ok!"),'status');
				drupal_goto('admin/settings/collabrep/Create-join');
			}
			else
			{
				drupal_set_message(t("exec remote cron error!"),'error');
				drupal_goto('admin/settings/collabrep/Cron');
			}

			drupal_goto('admin/settings/collabrep/Create-join');
		}
		else
		{
			drupal_set_message(t("exec local cron error!"),'error');
			drupal_goto('admin/settings/collabrep/Cron');
		}
		
		//Importa i learning object di altri
		


		variable_set('collabrep_federation_status', '4');
		drupal_goto('admin/settings/collabrep/Create-join');
	}
	
	return system_settings_form($form);
}

function collabrep_leave() 
{
	$form = array();
		$myvar=variable_get('collabrep_my_name',null);
		$ret=collabrep_python_interface("leave_federation", $myvar);
		variable_del('collabrep_federation_status');
		variable_del('collabrep_bootstrap_address');
		variable_del('collabrep_bootstrap_id');
		variable_del('collabrep_db_address');
		variable_del('collabrep_db_url');
		variable_del('collabrep_federation_password');
		variable_del('collabrep_login_password');
		variable_del('collabrep_login_user');
		variable_set('collabrep_federation_name','NOFEDERATION');
		$me = variable_get('collabrep_my_name',null);
		$param = array("myName" => $me);
		$ret1= collabrep_python_interface("update_local_fuids", $param);
		if (($ret1["return"]==True)&&($ret["return"]==True)) 
		{
			drupal_set_message(t("Federation Leaved"),'status');
		}
		else
		{
			drupal_set_message(t("Federation Leaved error"),'error');
		}	
	return system_settings_form($form);
}

function collabrep_create_or_join_federation()
{
	$form = array();
		switch (variable_get('collabrep_federation_status', '0')) {
		case '0':
			variable_set('collabrep_federation_status','0');
			$form['collabrep_federation_name'] = array(
				'#type' => 'textfield',
				'#title' => t('Federation name'),
				'#default_value' => variable_get('collabrep_federation_name', ''),
				'#size' => 50,
				'#maxlength' => 100,
				'#description' => t("The federation name you want to join/create, only letters and numbers allowed, 6 chars min, 100 chars max. If you're defining a new federation please choose a hard name to guess if you want to open your federation."),
				'#required' => TRUE,
			);
			$form['collabrep_federation_password'] = array(
				'#type' => 'textfield',
				'#title' => t('Federation secret word'),
				'#default_value' => variable_get('collabrep_federation_password', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("The secret word of the federation you want to join/create, only letters and numbers allowed, 6 chars min, 50 chars max. If you're defining a new federation please choose a hard secret word to guess if you want to open your federation."),
				'#required' => TRUE,
			);
			$form['collabrep_login_user'] = array(
				'#type' => 'textfield',
				'#title' => t('Local Collabrep Username'),
				'#default_value' => variable_get('collabrep_login_user', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("To allow only authenticated repositories to interact with the local data, you need to create a \"Collabrep Representation\", a User which has special \"is a collabrep repository representation\" permission. Remote servers will use this account to edit data."),
				'#required' => TRUE,
			);
			$form['collabrep_login_password'] = array(
				'#type' => 'password',
				'#title' => t('Local Collabrep Password'),
				'#default_value' => variable_get('collabrep_login_password', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("Please choose a strong password for this user."),
				'#required' => TRUE,
			);
			$form['collabrep_db_url'] = array(
				'#type' => 'textfield',
				'#title' => t('Shared DB URL'),
				'#default_value' => variable_get('collabrep_db_url', ''),
				'#size' => 100,
				'#description' => t("If you are creating a new federation you must provide db access to other federates. Make sure that the database is reachable from the outside. The attress must be like this: db_type://username:password@host/db_name"),
				'#required' => false,
			);
			$form['collabrep_my_name'] = array(
				'#type' => 'textfield',
				'#title' => t('Repository name'),
				'#default_value' => variable_get('collabrep_my_name', substr(preg_replace('[^A-Za-z0-9]','',variable_get('site_name', "")),0,20)),
				'#size' => 20,
				'#maxlength' => 20,
				'#description' => t("The repository name. Only letters and numbers allowed, 20 chars max."),
				'#required' => TRUE,
			);
			$form['collabrep_bootstrap_id'] = array(
				'#type' => 'textfield',
				'#title' => t('Bootstrap Server Name'),
				'#default_value' =>  variable_get('collabrep_federation_id', 'me'),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("If you are joining an existing federation, please insert one of the members name here. If you wish to start a new federation, write 'me' in this field."),
				'#required' => TRUE,
			);
		   $form['collabrep_bootstrap_address'] = array(
				'#type' => 'textfield',
				'#title' => t('Bootstrap Server'),
				'#default_value' => variable_get('collabrep_bootstrap_address', 'me'),
				'#size' => 50,
				'#maxlength' => 100,
				'#description' => t("If you are joining an existing federation, please insert one the address of one of the members here. The address should contain also the Drupal root folder (something like this: http://x.x.x.x/drupal/). If you wish to start a new federation, write 'me' in this field."),
				'#required' => TRUE,
			);
		break;
		case '1':
			$me = variable_get('collabrep_my_name',null);
			$bootstrapid=variable_get('collabrep_bootstrap_id',null);
			$mylogin = variable_get('collabrep_login_user',null);
			$mypwd = variable_get('collabrep_login_password',null);
			$param = array("myName" => $me, "myUrl" => url("", array("absolute"=>True)), "myUser" => $mylogin, "myPass" => $mypwd);	
			$ret= collabrep_python_interface("bootstrap_shared_setup", $param);
			if ($ret["return"]==True) 
			{
				
				drupal_set_message(t("Bootstrap step 1 ok!"),'status');
				variable_set('collabrep_federation_status', '2');
				drupal_goto('admin/settings/collabrep/Create-join');
			}
			else 
			{
				drupal_set_message(t('Shared database unavailable. Please try again later.'),'error');
				drupal_goto('admin/settings/collabrep/Create-join');
			}		
		break;
		case '2':
			//updating the Id_Fd of the local LearningObject
			$me = variable_get('collabrep_my_name',null);
			$param = array("myName" => $me);
			$ret= collabrep_python_interface("update_local_fuids", $param);
			if ($ret["return"]==True) 
			{
				drupal_set_message(t("Update Id_Fd ok!"),'status');
				variable_set('collabrep_federation_status', '3');
				drupal_goto('admin/settings/collabrep/Create-join');
			}
			else
			{
				drupal_set_message(t('Shared database unavailable. Please try again later.'),'error');
				drupal_goto('admin/settings/collabrep/Create-join');
			}
		break;
		case '3':
			//import the Lo_Federation list

			$param = "";
			$ret= collabrep_python_interface("import_local_federation", $param);
			if ($ret["return"]==True) 
			{
				drupal_set_message(t("import Lo_Federation ok!"),'status');
				variable_set('collabrep_federation_status', '4');
				drupal_goto('admin/settings/collabrep/Cron');
			}
			else
			{
				drupal_set_message(t("import Lo_Federation ok!"),'error');
				drupal_goto('admin/settings/collabrep/Create-join');
			}
		break;
		case '4': 
			drupal_set_message(t("Yuppy"),'status');
			$form['collabrep_federation_name'] = array(
				'#type' => 'textfield',
				'#title' => t('Federation name'),
				'#default_value' => variable_get('collabrep_federation_name', ''),
				'#size' => 50,
				'#maxlength' => 100,
				'#description' => t("The federation name you want to join/create, only letters and numbers allowed, 6 chars min, 100 chars max. If you're defining a new federation please choose a hard name to guess if you want to open your federation."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
			$form['collabrep_federation_password'] = array(
				'#type' => 'textfield',
				'#title' => t('Federation secret word'),
				'#default_value' => variable_get('collabrep_federation_password', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("The secret word of the federation you want to join/create, only letters and numbers allowed, 6 chars min, 50 chars max. If you're defining a new federation please choose a hard secret word to guess if you want to open your federation."),
				'#attributes' => array('readonly' => 'readonly'),				
				'#required' => TRUE,
			);
			$form['collabrep_login_user'] = array(
				'#type' => 'textfield',
				'#title' => t('Local Collabrep Username'),
				'#default_value' => variable_get('collabrep_login_user', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("To allow only authenticated repositories to interact with the local data, you need to create a \"Collabrep Representation\", a User which has special \"is a collabrep repository representation\" permission. Remote servers will use this account to edit data."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
			$form['collabrep_login_password'] = array(
				'#type' => 'password',
				'#title' => t('Local Collabrep Password'),
				'#default_value' => variable_get('collabrep_login_password', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("Please choose a strong password for this user."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
			$form['collabrep_db_url'] = array(
				'#type' => 'textfield',
				'#title' => t('Shared DB URL'),
				'#default_value' => variable_get('collabrep_db_url', ''),
				'#size' => 100,
				'#description' => t("If you are creating a new federation you must provide db access to other federates. Make sure that the database is reachable from the outside. The attress must be like this: db_type://username:password@host/db_name"),
				'#attributes' => array('readonly' => 'readonly'),				
				'#required' => false,
			);
			$form['collabrep_my_name'] = array(
				'#type' => 'textfield',
				'#title' => t('Repository name'),
				'#default_value' => variable_get('collabrep_my_name', substr(preg_replace('[^A-Za-z0-9]','',variable_get('site_name', "")),0,20)),
				'#size' => 20,
				'#maxlength' => 20,
				'#description' => t("This repository name. Only letters and numbers allowed, 20 chars max."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
			/*$form['collabrep_admin_homedir'] = array(
				'#type' => 'textfield',
				'#title' => t('Administrator home directory'),
				'#default_value' => variable_get('collabrep_admin_homedir', ''),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t('The home directory of an administrator user on this server. Obviously in Unix-style format like "/home/matt"'),
				'#required' => TRUE,
			);*/		
			$form['collabrep_bootstrap_id'] = array(
				'#type' => 'textfield',
				'#title' => t('Bootstrap Server Name'),
				'#default_value' =>  variable_get('collabrep_bootstrap_id', 'me'),
				'#size' => 50,
				'#maxlength' => 50,
				'#description' => t("If you are joining an existing federation, please insert one of the memebr's name here. If you wish to start a new federation, write 'me' in this field."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
		   $form['collabrep_bootstrap_address'] = array(
				'#type' => 'textfield',
				'#title' => t('Bootstrap Server'),
				'#default_value' => variable_get('collabrep_bootstrap_address', 'me'),
				'#size' => 50,
				'#maxlength' => 100,
				'#description' => t("If you are joining an existing federation, please insert one the address of one of the members here. The address should contain also the Drupal root folder (something like this: http://x.x.x.x/drupal/). If you wish to start a new federation, write 'me' in this field."),
				'#attributes' => array('readonly' => 'readonly'),
				'#required' => TRUE,
			);
		break;
	}
	return system_settings_form($form);
}

function collabrep_create_or_join_federation_validate($form, &$form_state) 
{
		$usernametmp=$form_state['values']['collabrep_login_user'];
		$ruser =user_load_by_name($usernametmp);
		$wrong = false;
		//required a standard module
			require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
		//
		if($ruser)
		{
			if(!user_check_password($form_state['values']['collabrep_login_password'],$ruser) )
			{
	       			form_set_error('collabrep_login_user',t('Invalid password.'));
		   		form_set_error('collabrep_login_password');
		   		$wrong = true;
	       			$ruser = False;
	    		}
		}
		else if ($ruser->uid==1)
		{
			form_set_error('collabrep_login_user',t('The administrator cannot be a federation representative.'));
			$wrong = true;
		}
		else if (!user_access('is a collabrep repository representation',$ruser)) 
		{
			form_set_error('collabrep_login_user',t('The selected user does not have the required permissions.'));
			$wrong = true;
		}
		if (preg_match('/^([a-zA-Z0-9])([a-zA-Z0-9]){4,}([a-zA-Z0-9])$/',$form_state['values']['collabrep_federation_name'])!=1 && $form_state['values']['collabrep_federation_name']!='NOFEDERATION') 
		{
			form_set_error('collabrep_federation_name', t('The federation name you entered is not valid. (' . $form_state['values']['collabrep_login_user'] . ')'));
			$wrong = true;
  		}
		if (preg_match('/^([a-zA-Z0-9])([a-zA-Z0-9]){4,}([a-zA-Z0-9])$/',$form_state['values']['collabrep_federation_password'])!=1 && $form_state['values']['collabrep_federation_password']!='NOPASSWORD') 
		{
			form_set_error('collabrep_federation_password', t('The federation secret word you entered is not valid.'));
	  		$wrong = true;
		}
		if (preg_match('/^([a-zA-Z0-9])([a-zA-Z0-9]){4,}([a-zA-Z0-9])$/',$form_state['values']['collabrep_my_name'])!=1) 
		{
			form_set_error('collabrep_my_name', t('The local repository name you entered is not valid.'));
	  		$wrong = true;
  		}
		if ($form_state['values']['collabrep_bootstrap_address']!='me') 
		{ 
			//the bootstrap server is another server
			if (empty($form_state['values']['collabrep_bootstrap_id']) || $form_state['values']['collabrep_bootstrap_id']=='me') 
			{
				form_set_error('collabrep_bootstrap_id',t('Please insert a valid repository id.'));
				$wrong = true;
			}
			if (!valid_url($form_state['values']['collabrep_bootstrap_address'],true)) 
			{
				$wrong = true;
				form_set_error('collabrep_bootstrap_address', t('The bootstrap address you entered is not valid.'));
			}
			if (!$wrong) 
			{
				if(substr($form_state['values']['collabrep_bootstrap_address'], -1)!='/')
				{
					$form_state['values']['collabrep_bootstrap_address'].='/';
				}
			}
		}
		else 
		{
			//Me as bootstrap server...
			if ($form_state['values']['collabrep_db_url']!='')
			{
				$collabrep_shared=$form_state['values']['collabrep_db_url'];
				// test the autentication
				$value=collabrep_python_interface("check_shared_database", $collabrep_shared);	
				if (!$value==true) 
				{
					//the test terminates wrongly
					form_set_error('collabrep_db_url',t('Could not connect to the shared database.'));
					$wrong = true;				
				}
			}
			else 
			{
				form_set_error('collabrep_db_url',t('Shared URL is a required field when creating a new federation.'));
				$wrong = true;
			}
		}
	if($wrong==false)
	{
		variable_set('collabrep_federation_status','1');
		drupal_set_message('Federation Succesfully Created','status');
	}
		
}
