<?php

function tax_assistant_menu() {
    $items = array();
	//L’array $items contine l’Url che avrà la pagina, poi creo un array con il titolo che dovrà essere dato al link (title), la funzione che dovrà richiamare (page callback) e un array di argomenti per accedere alla funzione di call back (access arguments
    $items['tax_assistant/synonyms'] = array(
        'title' => '',
        'page callback' => 'get_synonyms',
        /* 'access arguments' => array(), */
        'access arguments' => array('create or edit own linkableobject'),
        'type' => MENU_CALLBACK,
    );

    $items['tax_assistant/descrizione'] = array(
        'title' => '',
        'page callback' => 'category_hint',
        /* 'access arguments' => array(), */
        'access arguments' => array('create or edit own linkableobject'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function tax_assistant_form_alter(&$form, $form_state, $form_id) {
    //questa funzione è usata per alterare la disposizione del form originale
    //contenuto in un altro modulo (linkableobject)
    if ($form_id == 'linkableobject_node_form') {
      //choice of default_value done by Luca Sembolini
      global $fin;
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        // Get the nid
        $nid = arg(1);
        $fin=db_query("SELECT Categoria_LO FROM LO_category WHERE Id_LO = :nid", array(':nid' => $nid))->fetchField();
      }
      //  drupal_set_message("titolo"+ $fin);
        $tassonomia = taxonomy_vocabulary_get_names();
        foreach ($tassonomia as $rec) {
            $vid = $rec->vid;
            $array_val = array('0' => '--none--');
            $tree = taxonomy_get_tree($vid);
            foreach ($tree as $res) {
                $key = $res->tid;
                $value = $res->name;
                $array_val[$key] = $value;
                $vid = $rec->vid;
                $nome = $rec->name;
            }

            foreach ($tree as $key => $value) {
                $form ['tassonomia'][$value->vid] = array(
                    '#type' => 'select',
                    '#title' => $rec->name,
                    '#options' => $array_val, //get_vid($vid),
                    '#required' => TRUE,
                    '#default_value' => isset($fin) ? $fin :  t("select a category"),
                    '#ajax' => array(
                        'callback' => 'form_sinonimi',
                        'wrapper' => 'area_sinonimi',
                        'event' => 'change',
                        'replace' => TRUE,
                    ),
                );
            }

            $form['sinonimi'] = array(
                '#title' => t('Risultato dell\'elaborazione'),
                '#type' => 'hidden',
                '#prefix' => '<div id="area_sinonimi">',
                '#suffix' => '</div>',
            );

            $form['title']['#ajax']['callback'] = 'ajax_field_render';
            $form['title']['#ajax']['wrapper'] = 'valutazione';


            $form['Description']['#ajax']['callback'] = 'ajax_field_render';
            $form['Description']['#ajax']['wrapper'] = 'valutazione';

            $form['refresh'] = array(
                '#value' => t('Refresh Hint'),
                '#type' => 'button',
                '#prefix' => '<div id="refresh">',
                '#suffix' => '</div>',
                '#ajax' => array(
                    'callback' => 'ajax_field_render',
                    'wrapper' => 'valutazione',
                ),
            );

            $form['hint'] = array(
                '#title' => t('Category Hint'),
                '#type' => 'hidden',
                '#prefix' => '<div id="valutazione">',
                '#suffix' => '</div>',
            );
        }
    }
}

/**
 * Ajax callback for the Occupation section.
 * Adds term to the vocabulary and lists all
 */
function tax_assistant_vocabulary($vid) {
    $terms = taxonomy_get_tree($vid);
    $output = "";
    foreach ($terms as $data) {
        $output[$data->tid] = $data->name;
    }

    return $output;
}

function get_vocabolario($vid) {
    //carica dal database i vocabolari disponibili
    $result = db_query('SELECT vid, name FROM {taxonomy_vocabulary} where vid=:vid', array(':vid' => $vid));
    foreach ($result as $rec) {
        return $rec->name;
    }
}

function get_synonyms() {
	$keywords=array();
    $synonyms = "";
    $presenti = array();
    $tassonomia = taxonomy_vocabulary_get_names();
    //carica i sinonimi associati a ciascun vocabolario selezionato
    foreach ($tassonomia as $rec) {
        if (isset($_POST[$rec->vid]))
            $presenti[$rec->name] = $rec->vid;
    }
    foreach ($presenti as $res) {

        $tid = $_POST[$res];
        $result = db_query('SELECT name FROM {taxonomy_term_synonym} where tid=:tid', array(':tid' => $tid));
        $name = db_query('SELECT name FROM {taxonomy_term_data} where tid=:tid', array(':tid' => $tid));

        foreach ($name as $rec)
            $name_Voc = $rec->name;
        $voc = get_vocabolario($res);
        if ($tid > 0)
            $synonyms .= "<b>Synonyms for $name_Voc: </b></br>";
        foreach ($result as $rec) {
            $synonyms.= "<i>'" . $rec->name . "';</i> ";
            $keywords[$rec->name] = $rec->name;
        }
        $form['sinonimi'] = array(
            '#type' => 'item',
            '#description' => t("In order to facilitate the cataloging of your learning object,
		      try to make use of these terms for its description"),
            '#value' => $keywords[$rec->name],
        );

        $synonyms.='</br>';
    }

    return $synonyms;
}



//category_hint questa funzione è richiamata all'uscita dalla text area descrizione
//ed è quella che avvia il processo di controllo
function category_hint() {
    $message = '';
    $category_suggested = "";
    $description = $_POST['Description'];
    $title = $_POST['title'];
    $defmsg = "";
    $tassonomia = taxonomy_vocabulary_get_names();
    //Non prende piu' $_POST['tassonomia']
    foreach ($tassonomia as $rec) {
        if (isset($_POST[$rec->vid]))
            $presenti[$rec->name] = $rec->vid;
    }
    $debug = "";
    $ret = calcola_suggerimenti($title, $description);

    $nH = 0;
    $nV = 0;
    $hint = array();
    foreach ($ret['hint'] as $key => $value) {

        $hint[] = $value;
        $nH++;
        $debug.="sugg.-> $value </br> ";
    }

    $tid = array();
    foreach ($presenti as $res) {

        if ($_POST[$res] > 0) {
            $debug.=$res . "-";
            $tid[] = $res;
            $nV++;
        }
    }


    $debug.="nH  =  $nH **  nV = $nV</br>";


    if ($nH == 0) {
        if (is_array($description))
            $description = serialize($description);
        if (is_array($title))
            $title = serialize($title);

        if (strlen($description) > 0 && strlen($title) > 0)
            $message.= "<font color='ff0000'>Sorry, no category suggested by this description. </font>";
    }
    else {

        if ($nV > 1)
            $defmsg = "<b>You have selected more than one category. This is the report for the categories you've selected:</b></br>";
        foreach ($tid as $t) {
            $debug .= $t . "-";

            switch ($nH) {//dipendentemente da quanti sono i suggerimenti
                case 0://nessun suggerimento

                    $message .= '<font color="0000FF"><b>Sorry, no category suggested by this description</b></font></br>';
                    break;
                case 1:
                    $message .= check_tid_single($t, $hint);
                    break;
                default:
                    $message .= check_tid_multi($t, $hint);
                    break;
            }
        }
        if ($ret['message'] != '') {

            $message = $defmsg . $message . '<i>This is the list of categories that are compatible with the text and
                their value inherence (Hin value) and relevance
                (max for single term% | total %):</i></br>';
            if ($nV == 0)
                $message.="<i>(Remember that <b>you haven't yet selected a category</b> from the vocabularies)</i></br>";
        } else {
            $message = $defmsg . $message;
        }
    }

    $message.=$ret['message'];
    if (strlen($message) > 0)
        $category_suggested = $message;
    else
        $category_suggested = "<font color='ff0000'>Sorry, no category suggested by this description. </font>";

    $form = array(
        '#type' => 'item',
        '#title' => t('Categories suggested by Taxononomy assistant'), //t('Category Hint by Taxonomy Assistant'),
        '#description' => t("Depending on your choices and the text entered in the fields
            'title' and 'description' Taxonomy Assistant suggests the
            categories that are most relevant to them."),
        '#value' => $category_suggested,
    );

    return $category_suggested;
}


//function calcola_suggerimenti
function calcola_suggerimenti($title, $description) {
    $ret = array(
        'message' => '',
        'hint' => array(),
    );
    $tassonomia = taxonomy_vocabulary_get_names();
    //carica i sinonimi associati a ciascun vocabolario selezionato

    foreach ($tassonomia as $rec) {
        if (isset($_POST[$rec->vid])) {
            $presenti[$rec->name] = $rec->vid;
        }
    }

    if (is_array($description))
        $description = serialize($description);
    if (is_array($title))
        $title = serialize($title);
    $vid = array();
    $tid = array();
    $aRelevance = array();
    $query_voc = '';


    	foreach ($presenti as $res) {
        	if ($_POST[$res] > 0)
            		$tid[] = $_POST[$res];
        	$vid[] = $res;
        	if (strlen($query_voc) > 0)
            		$query_voc.=" or t1.vid=$res ";
        	else
            		$query_voc.="( t1.vid=$res ";
    	}
    if (strlen($query_voc) > 0)
        $query_voc.=") ";


//  VERIFICA CHE NON SIA NULLA LA DESCRIZIONE, IL TITOLO E LA PRELIMINARY ID
    if (strlen($description) > 0 && strlen($title) > 0) {
        //CONVERTE TUTTO IL TESTO IN CARATTERI MINUSCOLI e UNISCE description e title
        $text = strtolower($title . " " . $description);
        //rimozione simboli di punteggiatura e altro
        //Penso che preg_replace cosi lo prenda senza problemi
        $text = preg_replace("/[^A-Za-z0-9 ]/", " ", $text);
        //La chiamata a questa funzione estrae le parole chiave con l'esclusione di quelle non valide e le
        //restituisce in un array

        $arrayKeyWords = estrai($text);
        $nKeys = count($arrayKeyWords); //questo e' il numero iniziale di termini che andro' a cercare

        foreach ($arrayKeyWords as $key => $word) {

            $r = get_singolare($word);


            if ($r['s1'] != NULL) {
                $arrayKeyWords[] = $r['s1'];
            }
            if ($r['s2'] != NULL) {
                $arrayKeyWords[] = $r['s2'];
            }
            $r = get_plurale($word);

            if ($r['s1'] != NULL) {
                $arrayKeyWords[] = $r['s1'];
            }
            if ($r['s2'] != NULL) {
                $arrayKeyWords[] = $r['s2'];
            }
        }

        $arrayKeyWords = array_unique($arrayKeyWords);

        //generazione query che determina i conteggi
        $sub1 = "";
        //conta le parole chiave (comprensive dei termini aggiunti sing. e plurali
        //drupal_set_message(print_r($arrayKeyWords, true));
        $options = array();
        foreach ($arrayKeyWords as $key) {
            $options[] = "%" . $key . "%";
            $sub1 .= "S1.name like '%" . $key . "%' or ";
        }
        //rimuove l'ultimo or dalla stringa
        $sub1 = substr($sub1, 0, strlen($sub1) - 3);
        //drupal_set_message(print_r($sub1, true));
        //questa query esegue la selezione su tutti i vocabolari
        $query = "select t1.vid,t1.tid,t1.name as category, S1.tsid,S1.name as synonym, H1.parent, D1.depth
                    FROM taxonomy_term_data t1
                    LEFT JOIN taxonomy_term_synonym S1 ON t1.tid=S1.tid
                    JOIN taxonomy_term_hierarchy H1 ON t1.tid=H1.tid
                    JOIN dis_cat_terms_depth D1 ON t1.tid = D1.tid
                    WHERE (" . $sub1 . ")
                    ORDER BY D1.depth DESC, t1.tid ASC";

        $result = db_query($query, $options);

        //visualizzo i risultati
        $arrayTab = array();
        $debug = "";
        $nRec = 0;
        foreach ($result as $rec) {

            $nRec++; //numero di record
            $arrayTab[] = $rec;
        }


        $tid = '';
        $hin = 0;
        $aHin = array();
        $aWords = array();
        //effettua il conteggio  delle parole chiave trovate e le memorizza
        //nell'arrary $aHin
        for ($i = 0; $i < $nRec; $i++) { //verifica se il tid e' lo stesso del precedente
            if ($tid != $arrayTab[$i]->tid) { //se non lo e' crea un nuovo contatore
                $tid = $arrayTab[$i]->tid;
                $aHin[$tid] = 0; //e lo inizializza
                $aWords[$tid] = ""; //inizializza le parole chiave associate
            }


            $aRet = calcolare($arrayKeyWords, $arrayTab[$i], $nKeys); //valuta inerenza facendo
            //doppio confronto
            //in $aRet abbiamo un array che contiene informazioni sul valore
            //di inerenza e la percentuale di parole trovate

            $aHin[$tid] += $aRet['value'];

            //In questo modo non dovrebbe più dare quei errori
            if (!isset($aRelevance[$tid]))
                $aRelevance[$tid] = 0;

            if (!isset($aTotRelevance[$tid]))
                $aTotRelevance[$tid] = 0;

            if ($aRelevance[$tid] < $aRet['relevance'])
                $aRelevance[$tid] = $aRet['relevance'];


            $aTotRelevance[$tid] += $aRet['relevance'];
            $aTotRelevance[$tid] += $aRet['relevance'];
            if (!isset($aWords[$tid]['words']))
                $aWords[$tid]['words'] = array();
            $aWords[$tid]['words'] = combina($aWords[$tid]['words'], $aRet['words']);
        }

        foreach ($aWords as $tid => $value) {
            $aWords[$tid]['words'] = rem_double($aWords[$tid]['words']);
        }

        //somma i conteggi ai vari livelli dell'albero
        $key = array_keys($aHin);   //ricava le chiavi associative dell'array
        $nEl = count($key);         //ricava il numero di chiavi

        $debug.="n.elementi: $nEl</br>";
        $totHin = array();          //nuovo array che conterra' i conteggi
        //per ogni categoria effettua il conteggio risalendo l'albero fino alla radice
        for ($i = 0; $i < $nEl; $i++) {
            $n = $aHin[$key[$i]];
            if ($n >= 0)
                $n+=countTree($key[$i], $aHin);
            $totHin[$key[$i]] = $n;
        }
    } else {
        $ret['message'] .= "<font color='ff0000'>You must enter Title and description</font></br>";

        return $ret;
    }

    //ordina l'array risultante in ordine discendente
    arsort($totHin);

    //rapporta il risultato a 100
    $k = array_keys($totHin);
    $max = $totHin[$k[0]];
    foreach ($totHin as $key => $value) {
        if ($max > 0)
            $totHin[$key] = $value / $max * 100;
    }


    $n = 0;
    $prec = '';
    $message = '
<table>
<tr>
<th>Category</th>
<th>Keywords</th>
<th>Hin Value</th>
<th>Max</br>Relevance</th>
<th>Total</br> Relevance</th>
</tr>';

    foreach ($totHin as $key => $val) {

        $n++;
        if ($n == 1) {
            $prec = $val;
            $ret['hint'][] = $key;
        } else {
            if ($val == $prec) {
                //nel caso di valori di inerenza uguali
                //vengono aggiunti tutti gli elementi di uguale
                //valore
                $ret['hint'][] = $key;
            }
        }

        if ($val >= 0 && $aRelevance[$key] > 0) {//se imposto solo > non ho risultati nel caso di radici dell'albero
            if ($n == 1 || $val == $prec) {

                $message.="<tr>
                            <td><font color=”#008F00”>" . get_category($key) . "</font></td>
                            <td><font color=”#008F00”><b>" . mostraKeyWords($aWords[$key]) . "</b></font></td>
                            <td><font color=”#008F00”><b>" . round($val, 1) . "</b></font></td>
                            <td><font color=”#008F00”><b>" . round($aRelevance[$key], 1) . "</b>%</font></td>
                            <td><font color=”#008F00”><b>" . round($aTotRelevance[$key], 1) . "</b>% </i></font></td>
                           </tr>";
            } else {

                $message.="<tr>
                            <td>" . get_category($key) . "</td>
                            <td><b>" . mostraKeyWords($aWords[$key]) . "</b></td>
                            <td><b>" . round($val, 1) . "</b></td>
                            <td><b>" . round($aRelevance[$key], 1) . "</b>%</td>
                            <td><b>" . round($aTotRelevance[$key], 1) . "</b>% </i></td>
                           </tr>";
            }
        }
    }
    $message.='</table>';
    $ret['message'] .= $message;
    //drupal_set_message(print_r($ret,true));
    return $ret;
}

function calcolare($arrayKeyWords, $rec, $nKeys) {
    $aRet = array();
    $rec->synonym = strtolower($rec->synonym);

    //ripulisce dai sinonimi le stopKeyWords
    $synComplete = $rec->synonym;
    $rec->synonym = preg_replace("[^A-Za-z0-9 ]", " ", $rec->synonym);
    $rec->synonym = eliminaStopKeywords($rec->synonym);
    //estrae tutti i sinonimi e li mette nell'array $aSyn
    $aSyn = explode(" ", $rec->synonym);

    //effettua il confronto tra l'array dei sinonimi e quello delle keywords
    $res = array_intersect($aSyn, $arrayKeyWords);
    $nRes = count($res);
    //aRet contiene la struttura dati di ritorno della funzione
    $aRet['tid'] = $rec->tid;
    $aRet['synonym'] = 0;
    $relevance = 0;
    $rap = 0;

    if ($nRes > 0) {
        //conta quanti sono i sinonimi
        $nSyn = count($aSyn);
        //calcola l'inerenza con la seguente formula
        $val = pow($nRes, $nRes / $nSyn) * $rec->depth;


        if ($nSyn > 0) {
            $rap = ($nRes / $nSyn);
            $relevance = ($nRes / $nKeys) * 100;
        } else
            $relevance = 0;


        $val*=$rap;
        $val = $val * $relevance * $nRes;
        $aRet['relevance'] = $relevance;
        $aRet['value'] = $val;
    }
    else {
        $aRet['relevance'] = 0;
        $aRet['value'] = 0;
    }


//se il sinonimo composto è verificato al 100% allora la keyword assume
//il sinonimo completo
    if ($rap == 1 && $nSyn > 1) {
        $aRet['words'] = $res;
        $aRet['words'][] = $synComplete;
    } else
        $aRet['words'] = $res;

    return $aRet;
}

function estrai($text) {


    $stopwords = file_get_contents($_SERVER['DOCUMENT_ROOT'] . base_path() . drupal_get_path('module', 'tax_assistant') . '/stopwords.txt');



    $arraystopwords = explode(' ', $stopwords);

    $keys = explode(' ', $text); //estrazione delle parole chiave dal testo
    $arrayResult = array_diff($keys, $arraystopwords); //rimozione delle stopWord contenute in $text
    $arrayResult = array_unique($arrayResult); //rimuove i termini duplicati

    if (in_array("", $arrayResult))
        unset($arrayResult[array_search("", $arrayResult)]); //rimuove la parola chiave vuota


    sort($arrayResult); //esegue il sort dell'array ottenuto

    return $arrayResult;
}

function check_tid_single($t, $hint) {
    if ($t > 0) {
        if ($t == $hint[0]) {
            $msg = '<font color="00AA00">The selected category <b>' . get_category($t) . '</b> is correct</b></font></br>';
        } else {
            $msg = '<font color="#FF7700"><i>The category selected: <b>' . get_category($t) . '</b> does not match what suggested.</br>
  You are invited to use other synonyms more specific in your description in order to enable a correct cataloging or change your selection.</font></br>';
        }
    }
    return $msg;
}

function check_tid_multi($t, $hint) {
    if ($t > 0) {
        $msg = '<font color="#FF7700"><i><b>The category selected: <b>' . get_category($t) . '</b> does not match what suggested. </b></br>
  You are invited to use other synonyms more specific in your description in order to enable a correct cataloging or change your selection.</font></br>';
        foreach ($hint as $h) {
            if ($t == $h) {
                $msg = '<font color="#bb8800"><i>The category selected: <b>' . get_category($t) . '</b> is <b>valid, but is not unique</b>. </br>
  You are invited to add other synonyms more specific in order to enable a correct cataloging.</br></i></font>';
            }
        }
    }
    return $msg;
}

function combina($aRec, $aRet) {
    $aLocal = array();

    foreach ($aRec as $key => $value) {
        $aLocal[] = $value;
    }

    if (count($aRet) > 0) {
        foreach ($aRet as $key => $value) {

            $aLocal[] = $value;
        }
    }
    $aLocal = array_unique($aLocal); //elimina doppioni
    return $aLocal;
}

function eliminaStopKeyWords($text) {

    $aText = extractKeyWords($text);
    $text = "";
    for ($i = 0; $i < count($aText); $i++)
        $text .= $aText[$i] . " ";
    $text = trim($text);

    return $text;
}

function get_category($key) {
    $result = db_query("SELECT tid,name as category FROM {taxonomy_term_data} WHERE tid=:tid", array(':tid' => $key));

    foreach ($result as $rec) {
        return $rec->category;
    }
}

function mostraKeyWords($aWords) {
    $stringa = "";
    foreach ($aWords['words'] as $key => $value) {
        $stringa.="'$value' ";
    }
    return $stringa;
}

function countTree($key, $aHin) {
    $hier = get_parent($key);
    $n = "";

    if ($hier['depth'] != 0) {//caso base se il valore di depth = 0
        if (isset($aHin[$hier['parent']]))
            return $aHin[$hier['parent']] + countTree($hier['parent'], $aHin);
        else
            return countTree($hier['parent'], $aHin);
    }
    return 0;
}

function get_parent($tid) {
    $query = db_select('taxonomy_term_hierarchy', 'T');
    $query->fields('T', array('parent'))
            ->fields('D', array('depth'))
            ->join('dis_cat_terms_depth', 'D', 'T.tid = D.tid');
    $query->condition('T.tid', $tid, '=');
}

function calcola($arrayKeyWords, $rec, $nKeys) {

    $rec->synonym = strtolower($rec->synonym);
    //ripulisce dai sinonimi le stopKeyWords
    $synComplete = $rec->synonym;

    $rec->synonym = preg_replace("[^A-Za-z0-9 ]", " ", $rec->synonym);

    $rec->synonym = eliminaStopKeywords($rec->synonym);
    //estrae tutti i sinonimi e li mette nell'array $aSyn
    $aSyn = explode(" ", $rec->synonym);

    //effettua il confronto tra l'array dei sinonimi e quello delle keywords
    $res = array_intersect($aSyn, $arrayKeyWords);
    $nRes = count($res);
    //aRet contiene la struttura dati di ritorno della funzione
    $aRet->tid = $rec->tid;
    $aRet->synonym = 0;


    $rap = 0;
    if ($nRes > 0) {
        //conta quanti sono i sinonimi
        $nSyn = count($aSyn);
        //calcola l'inerenza con la seguente formula
        $val = pow($nRes, $nRes / $nSyn) * $rec->depth;


        if ($nSyn > 0) {
            $rap = ($nRes / $nSyn);
            $relevance = ($nRes / $nKeys) * 100;
        } else
            $relevance = 0;


        $val*=$rap;
        $val = $val * $relevance * $nRes;
        $aRet->relevance = $relevance;
        $aRet->value = $val;
    } else
        $aRet->value = 0;


//se il sinonimo composto è verificato al 100% allora la keyword assume
//il sinonimo completo
    if ($rap == 1 && $nSyn > 1) {
        $aRet['words'] = $res;
        $aRet['words'][] = $synComplete;
    } else
        $aRet->words = $res;
    return $aRet;
}

function rem_double($a1) {
    foreach ($a1 as $value) {

        $a2 = explode(' ', $value);
        if (count($a2) > 1)
            foreach ($a2 as $search) {
                unset($a1[array_search($search, $a1)]);
            }
    }
    return $a1;
}

function extractKeyWords($text) {


    $stopwords = file_get_contents($_SERVER['DOCUMENT_ROOT'] . base_path() . drupal_get_path('module', 'tax_assistant') . '/stopwords.txt');

    $arraystopwords = explode(' ', $stopwords);

    $keys = explode(' ', $text); //estrazione delle parole chiave dal testo
    $arrayResult = array_diff($keys, $arraystopwords); //rimozione delle stopWord contenute in $text
    $arrayResult = array_unique($arrayResult); //rimuove i termini duplicati

    if (in_array("", $arrayResult))
        unset($arrayResult[array_search("", $arrayResult)]); //rimuove la parola chiave vuota


    sort($arrayResult); //esegue il sort dell'array ottenuto

    return $arrayResult;
}

function get_plurale($stringa = "", $stringa2 = "") {

    $ultimo = substr($stringa, strlen($stringa) - 1);
    $penultimo = substr($stringa, strlen($stringa) - 2, 1);
    if (strlen($stringa) > 0) {

        switch ($ultimo) {
            case 's':
                $stringa.="es";
                break;
            case 'h':
                if ($penultimo == 's' || $penultimo == 'c')
                    $stringa.="es";
                break;
            case 'x':
                $stringa.="es";
                break;
            case 'o':
                if ($penultimo == 'a' || $penultimo == 'e' || $penultimo == 'i' || $penultimo == 'u')
                    $stringa.="s";
                else {
                    $stringa2 = $stringa . "es";
                    $stringa.="s";
                }
                break;

            case 'y':
                if ($penultimo == 'a' || $penultimo == 'e' || $penultimo == 'i' ||
                        $penultimo == 'o' || $penultimo == 'u')
                    $stringa.="s";
                else
                    $stringa = substr($stringa, 0, strlen($stringa) - 1) . "ies";
                break;
            case 'f':
                $stringa = substr($stringa, 0, strlen($stringa) - 1) . "ves";
                break;
            case 'e':
                if ($penultimo == 'f')
                    $stringa = substr($stringa, 0, strlen($stringa) - 2) . 'ves';
                else
                    $stringa.='s';
                break;
            default:

                if (strlen($stringa) > 0)
                    $stringa.='s';
                break;
        }
    }

    return array(
        's1' => $stringa,
        's2' => $stringa2,
    );
}

function get_singolare($stringa = "", $stringa2 = "") {

    $ultimo = substr($stringa, strlen($stringa) - 1);
    $penultimo = substr($stringa, strlen($stringa) - 2, 1);
    $terzultimo = substr($stringa, strlen($stringa) - 3, 1);
    if (strlen($stringa) > 0) {

        switch ($ultimo) {
            case 's':
                switch ($penultimo) {
                    case 'e':
                        if ($terzultimo == 'i')
                            $stringa = substr($stringa, 0, strlen($stringa) - 3) . 'y';
                        else if ($terzultimo == 'v') {
                            $stringa2 = substr($stringa, 0, strlen($stringa) - 3) . 'fe';
                            $stringa = substr($stringa, 0, strlen($stringa) - 3) . 'f';
                        } else if ($terzultimo == 's')
                            $stringa = substr($stringa, 0, strlen($stringa) - 2);
                        else
                            $stringa = substr($stringa, 0, strlen($stringa) - 1);
                        break;
                    case 'o': {

                            $stringa = substr($stringa, 0, strlen($stringa) - 1);
                        }
                        break;
                    default:
                        $stringa = substr($stringa, 0, strlen($stringa) - 1);
                        break;
                }

                break;
        }
    }
    return array(
        's1' => $stringa,
        's2' => $stringa2,
    );
}

function form_sinonimi($form, &$form_state) {
    $out_text = get_synonyms();
    return '<div id="area_sinonimi">' . $out_text . '</div>';
}

function ajax_field_render($form, &$form_state) {
    $synonyms = category_hint();
    return '<div id="valutazione">' . $synonyms . '</div>';
}
